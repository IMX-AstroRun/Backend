"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addContent = void 0;
var line_ending_helper_1 = require("./line-ending.helper");
function addContent(inputString, content, options) {
    content = Array.isArray(content) ? content : [content];
    var lineBreak = line_ending_helper_1.findEscapeSequence(inputString);
    var lines = line_ending_helper_1.splitContent(inputString);
    var replaceBelowLine = lines.filter(function (line) { return line.indexOf(options.replaceBelow) === 0; })[0];
    var replaceBelowIndex = replaceBelowLine != null ? lines.indexOf(replaceBelowLine) : -1;
    var replaceAboveLine = lines.filter(function (line) { return line.indexOf(options.replaceAbove) === 0; })[0];
    var replaceAboveIndex = replaceAboveLine != null ? lines.indexOf(replaceAboveLine) : -1;
    if (replaceAboveIndex > -1 && replaceBelowIndex > -1 && replaceAboveIndex < replaceBelowIndex) {
        throw new Error("The replaceAbove marker '" + options.replaceAbove + "' was found before the replaceBelow marker '" + options.replaceBelow + "'. The replaceBelow marked must be before the replaceAbove.");
    }
    var linesBefore = lines.slice(0, replaceBelowIndex + 1);
    var linesAfter = replaceAboveIndex >= 0 ? lines.slice(replaceAboveIndex) : [];
    var constantLines = content.reduce(function (lines, currentContent) { return __spreadArrays(lines, line_ending_helper_1.splitContent(currentContent)); }, new Array());
    var allLines = __spreadArrays(linesBefore, constantLines, linesAfter);
    if (options.removeDoubleBlankLines) {
        allLines = allLines.filter(function (line, index, lines) { return filterDoubleBlankLines(line, index, lines); });
    }
    return allLines.join(lineBreak);
}
exports.addContent = addContent;
var nonWhitespaceRegExp = /[^ \t]/;
function filterDoubleBlankLines(line, index, lines) {
    var previousLine = index > 0 ? lines[index - 1] : undefined;
    return nonWhitespaceRegExp.test(line) || previousLine == null || nonWhitespaceRegExp.test(previousLine);
}
