import * as t from 'io-ts';
import { ImmutableMethodParams } from './types';
export declare enum PrimaryTransactionStatus {
    Created = "created",
    Pending = "pending",
    Completed = "completed",
    Failed = "failed",
    WaitingAuthorization = "waitingAuthorization"
}
export declare const ImmutableNFTPrimaryTransactionBaseCodec: t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>;
export declare const ImmutableCreateNFTPrimaryTransactionParamsCodec: t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>;
export declare type ImmutableCreateNFTPrimaryTransactionParams = t.OutputOf<typeof ImmutableCreateNFTPrimaryTransactionParamsCodec>;
export declare const ImmutableCreateNFTPrimaryTransactionResponseCodec: t.IntersectionC<[t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>, t.TypeC<{
    transaction_id: t.StringC;
    token_id: t.StringC;
}>]>;
export declare type ImmutableCreateNFTPrimaryTransactionResponse = t.TypeOf<typeof ImmutableCreateNFTPrimaryTransactionResponseCodec>;
export declare const ImmutableGetNFTPrimaryTransactionStatusResponseCodec: t.IntersectionC<[t.TypeC<{
    contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    offer_id: t.StringC;
    user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
}>, t.TypeC<{
    transaction_id: t.StringC;
    status: t.StringC;
}>, t.PartialC<{
    from_amount: t.NumberC;
    from_currency: t.StringC;
    fees_amount: t.NumberC;
    created_at: t.StringC;
}>]>;
export declare type ImmutableGetNFTPrimaryTransactionStatusResponse = t.TypeOf<typeof ImmutableGetNFTPrimaryTransactionStatusResponseCodec>;
export declare const ImmutableGetPrimaryTransactionsHistoryParamsCodec: t.IntersectionC<[t.PartialC<{
    order_by: t.StringC;
    page_size: t.BrandC<t.NumberC, t.IntBrand>;
    cursor: t.StringC;
    direction: t.Type<ImmutableMethodParams.ImmutableSortOrder, ImmutableMethodParams.ImmutableSortOrder, unknown>;
}>, t.PartialC<{
    id: t.StringC;
    status: t.StringC;
    wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
    provider: t.StringC;
    mint_id: t.StringC;
}>]>;
export declare const ImmutableGetNFTPrimaryTransactionsHistoryResultCodec: t.IntersectionC<[t.IntersectionC<[t.TypeC<{
    cursor: t.StringC;
}>, t.PartialC<{
    remaining: t.BrandC<t.NumberC, t.IntBrand>;
}>]>, t.TypeC<{
    result: t.ArrayC<t.IntersectionC<[t.TypeC<{
        contract_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
        offer_id: t.StringC;
        user_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
        seller_wallet_address: t.BrandC<t.StringC, import("../runtime").EthAddressBrand>;
        provider: t.StringC;
    }>, t.TypeC<{
        transaction_id: t.StringC;
        status: t.StringC;
    }>, t.PartialC<{
        from_amount: t.NumberC;
        from_currency: t.StringC;
        fees_amount: t.NumberC;
        created_at: t.StringC;
    }>]>>;
}>]>;
export declare type ImmutableGetPrimaryTransactionsHistoryParams = t.TypeOf<typeof ImmutableGetPrimaryTransactionsHistoryParamsCodec>;
export declare type ImmutableGetPrimaryTransactionsHistoryParamsTS = t.OutputOf<typeof ImmutableGetPrimaryTransactionsHistoryParamsCodec>;
export declare type ImmutableGetNFTPrimaryTransactionsHistoryResult = t.OutputOf<typeof ImmutableGetNFTPrimaryTransactionsHistoryResultCodec>;
